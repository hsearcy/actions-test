def continuePipeline = true
def rollback = false;

pipeline {
  agent any
  environment {
    PACKAGE_PATH="packages/sls-test-A"
    SERVICE_NAME="service1"
  }
  stages {
    stage('Echo Changes') {
      steps {
        script {
          echo "Package path is: ${env.PACKAGE_PATH}"
          def changeLogSets = currentBuild.changeSets
          def allChanges = ""
          def relevantChanges = ""
          for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
              def relevantIncluded = false
              def entry = entries[j]
              def commitHeader = "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}\n"
              allChanges += commitHeader
              def files = new ArrayList(entry.affectedFiles)
              for (int k = 0; k < files.size(); k++) {
                def file = files[k]
                allChanges += "  ${file.editType.name} ${file.path}\n"
                if (file.path.contains(env.PACKAGE_PATH)) {
                  if (!relevantIncluded) {
                    relevantIncluded = true
                    relevantChanges += commitHeader
                  }
                  relevantChanges += "  ${file.editType.name} ${file.path}\n"
                }
              }
            }
          }
          echo "All changes since last build:\n${allChanges}"
          echo "Changes relevant to ${env.PACKAGE_PATH}:\n${relevantChanges}"
          if (relevantChanges.length() > 0) {
            echo "Changes detected, continuing pipeline."
          } else {
            continuePipeline = false
            echo "No changes detected, waiting for user input to continue."
          }
        }
      }
    }

    stage('Continue?') {
      when {
        expression { !continuePipeline }
      }
      steps {
        timeout(time: 30, unit: "SECONDS") {
          input 'No changes detected, continue anyway?'
          script { continuePipeline = true }
        }
      }
    }

    stage('Yarn install') {
      steps {
        nodejs('Node 8') {
          sh '''cd $PACKAGE_PATH
                yarn'''
        }

      }
    }

    stage('Test') {
      when {
        expression { continuePipeline }
      }
      steps {
        nodejs('Node 8') {
          sh '''cd $PACKAGE_PATH
                yarn jest'''
        }
      }
    }

    stage('Deploy') {
      when {
        expression { continuePipeline }
      }
      steps {
        milestone(label: 'Built', ordinal: 1)
        timeout(time: 30, unit: "MINUTES") {
          input 'Deploy??'
          milestone(label: 'Deploy', ordinal: 2)
          nodejs('Node 8') {
            sh '''cd $PACKAGE_PATH
                  sls deploy'''
          }
        }
      }
    }

    stage('Update JIRA') {
      when {
        expression { continuePipeline }
      }
      steps {
        script {
          def issues = jiraJqlSearch(jql: "project = Jenkins AND status = Done AND labels = ${env.SERVICE_NAME}", auditLog: true, failOnError: true, site: 'Gather')
          def firstIssue = true
          def deployedStatusID = "-1"
          issues.data.issues.each { issue ->
            echo issue.key.toString()
            if (firstIssue) {
              firstIssue = false
              def transitions = jiraGetIssueTransitions idOrKey: issue.key, site: 'Gather'
              deployedStatusID = transitions.data.transitions.find { it.name == "Deployed" }.id.toString()
            }
            if (deployedStatusID != "-1") {
              def issueUpdate = [ transition: [ id: deployedStatusID ]]
              def response = jiraTransitionIssue (idOrKey: issue.key, input: issueUpdate, site: 'Gather')
            }
          }
        }

      }
    }

    stage('Remove') {
      when {
        expression { continuePipeline }
      }
      steps {
        timeout(time: 30, unit: "SECONDS") {
          input 'Remove sls'
          script {
            rollback = true;
            currentBuild.result = "UNSTABLE";
          }
          nodejs('Node 8') {
            sh '''cd $PACKAGE_PATH
                  sls remove'''
          }
        }
      }
    }

    stage ('Done') {
      when {
        expression { continuePipeline && !rollback }
      }
      steps {
        script { currentBuild.result = "SUCCESS" }
      }
    }
  }
}
