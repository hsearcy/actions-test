def continuePipeline = true
def rollback = false
def utils

pipeline {
  agent any
  environment {
    PACKAGE_PATH="packages/sls-test-A"
    SERVICE_NAME="service1"
  }
  stages {
    stage('Get Changes') {
      steps {
        script {
          cat "../Jenkins/utils.groovy"
          utils = load "../Jenkins/utils.groovy";
          continuePipeline = utils.ProcessChangelog();
          utils.GetAllChanges();
        }
      }
    }

    stage('Continue?') {
      when {
        expression { !continuePipeline }
      }
      steps {
        timeout(time: 30, unit: "SECONDS") {
          input 'No changes detected, continue anyway?'
          script { continuePipeline = true }
        }
      }
    }

    stage('Yarn install') {
      steps {
        nodejs('Node 8') {
          sh '''cd $PACKAGE_PATH
                yarn'''
        }

      }
    }

    stage('Test') {
      steps {
        nodejs('Node 8') {
          sh '''cd $PACKAGE_PATH
                yarn jest'''
        }
      }
    }

    stage('Deploy') {
      steps {
        milestone(label: 'Built', ordinal: 1)
        timeout(time: 30, unit: "MINUTES") {
          input 'Deploy??'
          milestone(label: 'Deploy', ordinal: 2)
          nodejs('Node 8') {
            sh '''cd $PACKAGE_PATH
                  sls deploy'''
          }
        }
      }
    }

    stage('Update JIRA') {
      steps {
        script {
          utils.UpdateJiraIssues(env.SERVICE_NAME)
        }
      }
    }

    stage('Remove') {
      steps {
        timeout(time: 30, unit: "MINUTES") {
          script {
            try {
              input 'Remove sls'
              script {
                rollback = true;
                currentBuild.result = "UNSTABLE";
              }
            } catch (error) {
              rollback = false;
            }
            if (rollback) {
              nodejs('Node 8') {
                sh '''cd $PACKAGE_PATH
                      sls remove'''
              }
            }
          }
        }
      }
    }

    stage ('Successfully Deployed') {
      when {
        expression { !rollback }
      }
      steps {
        script { currentBuild.result = "SUCCESS" }
      }
    }
  }
}
